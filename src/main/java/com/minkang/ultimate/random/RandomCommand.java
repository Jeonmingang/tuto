package com.minkang.ultimate.random;
import com.minkang.ultimate.random.gui.SettingsGUI;
import org.bukkit.*;
import org.bukkit.command.*;
import org.bukkit.entity.Player;
import org.bukkit.inventory.*;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.persistence.*;
import java.util.*;
import java.util.stream.Collectors;
public class RandomCommand implements CommandExecutor, TabCompleter {
  private final Main plugin; public RandomCommand(Main plugin){ this.plugin=plugin; }
  private boolean isAdmin(CommandSender s){ if(!(s instanceof Player)) return true; Player p=(Player)s; return p.isOp()||p.hasPermission("ultimate.random.admin"); }
  public boolean onCommand(CommandSender sender, Command cmd, String label, String[] a){
    String sub=a.length>0?a[0]:"";
    if(sub.equalsIgnoreCase("생성")){ if(!isAdmin(sender)){ sender.sendMessage("권한이 없습니다."); return true; } if(a.length<2){ sender.sendMessage("/"+label+" 생성 <키>"); return true; } String key=a[1]; if(plugin.getManager().exists(key)){ sender.sendMessage(plugin.msg("exists").replace("%key%",key)); return true;} plugin.getManager().create(key); sender.sendMessage(plugin.msg("created").replace("%key%",key)); return true; }
    if(sub.equalsIgnoreCase("삭제")){ if(!isAdmin(sender)){ sender.sendMessage("권한이 없습니다."); return true; } if(a.length<2){ sender.sendMessage("/"+label+" 삭제 <키>"); return true; } String key=a[1]; boolean ok=plugin.getManager().delete(key); sender.sendMessage(ok?plugin.msg("deleted").replace("%key%",key):plugin.msg("not_found").replace("%key%",key)); return true; }
    if(sub.equalsIgnoreCase("목록")){ java.util.List<String> list=plugin.getManager().all().stream().map(Roulette::getKey).sorted().collect(Collectors.toList()); sender.sendMessage("§b[룰렛] §f키 목록: §e"+(list.isEmpty()?"없음":String.join(", ",list))); return true; }
    if(sub.equalsIgnoreCase("설정")){ if(!isAdmin(sender)){ sender.sendMessage("권한이 없습니다."); return true; } if(!(sender instanceof Player)){ sender.sendMessage("플레이어만 사용 가능합니다."); return true; } if(a.length<2){ sender.sendMessage("/"+label+" 설정 <키>"); return true; } String key=a[1]; Roulette r=plugin.getManager().get(key); if(r==null){ sender.sendMessage(plugin.msg("not_found").replace("%key%",key)); return true; } Player p=(Player)sender; com.minkang.ultimate.random.gui.SettingsGUI.open(plugin,p,r); p.sendMessage(plugin.msg("open_settings").replace("%key%",key)); p.sendMessage(plugin.color(plugin.getConfig().getString("messages.setting_hint_1"))); p.sendMessage(plugin.color(plugin.getConfig().getString("messages.setting_hint_2"))); return true; }
    if(sub.equalsIgnoreCase("아이템")){ if(!isAdmin(sender)){ sender.sendMessage("권한이 없습니다."); return true; } if(!(sender instanceof Player)){ sender.sendMessage("플레이어만 사용 가능합니다."); return true; } if(a.length<2){ sender.sendMessage("/"+label+" 아이템 <키>"); return true; } String key=a[1]; Roulette r=plugin.getManager().get(key); if(r==null){ sender.sendMessage(plugin.msg("not_found").replace("%key%",key)); return true; } Player p=(Player)sender; ItemStack hand=p.getInventory().getItemInMainHand(); if(hand==null||hand.getType()==Material.AIR){ p.sendMessage(plugin.msg("need_item_in_hand")); return true; } ItemStack copy=hand.clone(); ItemMeta meta=copy.getItemMeta(); if(meta!=null){ if(!meta.getPersistentDataContainer().has(plugin.getPdcKey(), PersistentDataType.STRING)) meta.getPersistentDataContainer().set(plugin.getPdcKey(), PersistentDataType.STRING, r.getKey()); java.util.List<String> lore=new java.util.ArrayList<String>(); lore.add(plugin.color(plugin.getConfig().getString("randomkey.key-header","&6&l[ 뽑기 ] &e%key%").replace("%key%", r.getKey()))); lore.add(plugin.color(plugin.getConfig().getString("randomkey.key-subtitle","&8━ &7뽑기 구성 (확률)"))); int total=r.getTotalWeight(); java.text.DecimalFormat df=new java.text.DecimalFormat("#.##"); int shown=0, limit=12; for(RouletteEntry re: r.getEntries()){ if(re==null||re.getItem()==null||re.getItem().getType()==Material.AIR) continue; String nm=re.getItem().hasItemMeta()&&re.getItem().getItemMeta().hasDisplayName()? re.getItem().getItemMeta().getDisplayName(): re.getItem().getType().name(); double chance=100.0*re.getWeight()/Math.max(1,total); String line=plugin.getConfig().getString("randomkey.key-entry","&7- &f%item% &7(&e%chance%%%&7)"); line=line.replace("%item%", ChatColor.stripColor(nm)).replace("%chance%", df.format(chance)); lore.add(plugin.color(line)); shown++; if(shown>=limit) break; } int remain=r.getEntries().size()-shown; if(remain>0) lore.add(plugin.color("&7... 외 &e"+remain+"&7개")); lore.add(plugin.color(plugin.getConfig().getString("randomkey.key-footer","&8우클릭 시 뽑기 GUI"))); lore.add("§7[룰렛키: "+r.getKey()+"]"); meta.setLore(new java.util.ArrayList<>(new java.util.LinkedHashSet<>(lore))); copy.setItemMeta(meta);} p.getInventory().setItemInMainHand(copy); plugin.getManager().setTriggerItem(key, copy); p.playSound(p.getLocation(),Sound.UI_BUTTON_CLICK,1f,1.2f); p.sendMessage(plugin.msg("set_item_bind").replace("%key%",key)); return true; }
    if(sub.equalsIgnoreCase("지급")){ if(!isAdmin(sender)){ sender.sendMessage("권한이 없습니다."); return true; } if(a.length<4){ sender.sendMessage("/"+label+" 지급 <키> <플레이어> <갯수>"); return true; } String key=a[1]; Roulette r=plugin.getManager().get(key); if(r==null){ sender.sendMessage(plugin.msg("not_found").replace("%key%",key)); return true; } Player t=Bukkit.getPlayerExact(a[2]); if(t==null){ sender.sendMessage(plugin.msg("give_player_not_found")); return true; } int amount=0; try{ amount=Integer.parseInt(a[3]); }catch(Exception ignore){} if(amount<=0){ sender.sendMessage(plugin.msg("give_invalid_amount")); return true; } ItemStack base=r.getTriggerItem(); if(base==null||base.getType()==Material.AIR){ sender.sendMessage(plugin.msg("give_need_trigger").replace("%key%",key)); return true; } base=base.clone(); ItemMeta meta=base.getItemMeta(); if(meta!=null){ if(!meta.getPersistentDataContainer().has(plugin.getPdcKey(), PersistentDataType.STRING)) meta.getPersistentDataContainer().set(plugin.getPdcKey(), PersistentDataType.STRING, r.getKey()); java.util.List<String> lore=meta.hasLore()?meta.getLore():new java.util.ArrayList<String>(); if(lore==null) lore=new java.util.ArrayList<String>(); boolean has=false; for(String l:lore) if(l.contains("룰렛키: ")){ has=true; break;} if(!has) lore.add("§7[룰렛키: "+key+"]"); meta.setLore(new java.util.ArrayList<>(new java.util.LinkedHashSet<>(lore))); base.setItemMeta(meta);} int remain=amount, max=base.getMaxStackSize(); while(remain>0){ ItemStack give=base.clone(); int part=Math.min(max,remain); give.setAmount(part); java.util.Map<Integer,ItemStack> left=com.minkang.ultimate.random.RewardGiver.giveClean(t, give); if(!left.isEmpty()) for(ItemStack lf:left.values()) com.minkang.ultimate.random.RewardGiver.giveClean(t, lf); remain-=part; } sender.sendMessage(plugin.msg("give_success").replace("%player%",t.getName()).replace("%key%",key).replace("%amount%",String.valueOf(amount))); return true; }
    sender.sendMessage("§b/랜덤 생성 <키> §7- 새 룰렛 생성"); sender.sendMessage("§b/랜덤 삭제 <키> §7- 룰렛 삭제"); sender.sendMessage("§b/랜덤 설정 <키> §7- GUI로 아이템 등록/가중치 조절 (닫으면 저장)"); sender.sendMessage("§b/랜덤 아이템 <키> §7- 손 아이템을 우클릭시 뽑기 키로 지정(구성/확률 로어 자동 생성)"); sender.sendMessage("§b/랜덤 지급 <키> <플레이어> <갯수> §7- 해당 열쇠 아이템 지급"); sender.sendMessage("§b/랜덤 목록 §7- 키 목록"); return true; }
  public java.util.List<String> onTabComplete(CommandSender s, Command c, String alias, String[] a){
    if(a.length==1) return java.util.Arrays.asList("생성","삭제","설정","아이템","목록","지급").stream().filter(x->x.startsWith(a[0])).collect(java.util.stream.Collectors.toList());
    if(a.length==2 && !a[0].equalsIgnoreCase("목록")){ java.util.List<String> keys=new java.util.ArrayList<>(); for(Roulette r: plugin.getManager().all()) keys.add(r.getKey()); if(a[0].equalsIgnoreCase("생성")) return java.util.Collections.singletonList("<키>"); java.util.List<String> out=new java.util.ArrayList<>(); for(String k:keys) if(k.startsWith(a[1])) out.add(k); return out; }
    if(a.length==3 && a[0].equalsIgnoreCase("지급")){ java.util.List<String> names=new java.util.ArrayList<>(); for(Player pl:Bukkit.getOnlinePlayers()) names.add(pl.getName()); java.util.List<String> out=new java.util.ArrayList<>(); for(String n:names) if(n.toLowerCase().startsWith(a[2].toLowerCase())) out.add(n); return out; }
    if(a.length==4 && a[0].equalsIgnoreCase("지급")) return java.util.Collections.singletonList("1");
    return java.util.Collections.emptyList();
  }
}